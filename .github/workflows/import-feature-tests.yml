name: SCP Import Feature Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'internal/importers/**'
      - 'internal/services/import_service.go'
      - 'internal/api/handlers/import_handler.go'
      - 'tests/**'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'internal/importers/**'
      - 'internal/services/import_service.go'
      - 'internal/api/handlers/import_handler.go'
      - 'tests/**'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

env:
  GO_VERSION: '1.19'
  MYSQL_HOST: 127.0.0.1
  MYSQL_PORT: 3306
  MYSQL_USER: root
  MYSQL_PASSWORD: root
  MYSQL_DATABASE: portal64api_test
  REDIS_HOST: 127.0.0.1
  REDIS_PORT: 6379

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run unit tests
      run: |
        mkdir -p test-results
        go test -v -timeout=10m -coverprofile=coverage.out -covermode=atomic ./tests/unit/... | tee test-results/unit-tests.log
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out > coverage-summary.txt
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          test-results/
          coverage.out
          coverage.html
          coverage-summary.txt
    
    - name: Comment coverage
      if: github.event_name == 'pull_request'
      run: |
        COVERAGE=$(grep "total:" coverage-summary.txt | awk '{print $3}')
        echo "Unit Test Coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"$MYSQL_HOST" -P"$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done
        echo "MySQL is ready!"
    
    - name: Setup test database
      run: |
        mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE}_integration;"
        mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS test_mvdsb;"
        mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS test_portal64_bdw;"
    
    - name: Run integration tests
      run: |
        mkdir -p test-results
        go test -v -timeout=15m ./tests/integration/... | tee test-results/integration-tests.log
      env:
        MYSQL_HOST: ${{ env.MYSQL_HOST }}
        MYSQL_PORT: ${{ env.MYSQL_PORT }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        REDIS_HOST: ${{ env.REDIS_HOST }}
        REDIS_PORT: ${{ env.REDIS_PORT }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Setup test databases
      run: |
        mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS mvdsb;"
        mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS portal64_bdw;"
    
    - name: Build application
      run: |
        go build -o bin/portal64api ./cmd/server
        chmod +x bin/portal64api
    
    - name: Start Portal64API service
      run: |
        ./bin/portal64api &
        echo $! > portal64api.pid
        
        # Wait for service to start
        for i in {1..30}; do
          if curl -s http://localhost:8080/health > /dev/null; then
            echo "Portal64API service started successfully"
            break
          fi
          echo "Waiting for Portal64API service... ($i/30)"
          sleep 2
        done
        
        # Verify service is running
        if ! curl -s http://localhost:8080/health > /dev/null; then
          echo "Failed to start Portal64API service"
          exit 1
        fi
      env:
        MYSQL_HOST: ${{ env.MYSQL_HOST }}
        MYSQL_PORT: ${{ env.MYSQL_PORT }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        REDIS_HOST: ${{ env.REDIS_HOST }}
        REDIS_PORT: ${{ env.REDIS_PORT }}
    
    - name: Run E2E tests
      run: |
        mkdir -p test-results
        go test -v -timeout=20m ./tests/e2e/... | tee test-results/e2e-tests.log
      env:
        RUN_E2E_TESTS: true
        API_BASE_URL: http://localhost:8080
        CI: true
    
    - name: Stop Portal64API service
      if: always()
      run: |
        if [ -f portal64api.pid ]; then
          kill $(cat portal64api.pid) || true
          rm portal64api.pid
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results/
    
    - name: Upload service logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: service-logs
        path: |
          *.log
          logs/

  benchmark-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks
      run: |
        mkdir -p benchmark-results
        go test -bench=. -benchmem -timeout=30m ./tests/benchmarks/... > benchmark-results/benchmarks.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results/
    
    - name: Comment benchmark results
      run: |
        echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        grep "Benchmark" benchmark-results/benchmarks.txt | head -10 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif
    
    - name: Run Go vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m ./tests/...
    
    - name: Run go vet
      run: go vet ./tests/...
    
    - name: Check gofmt
      run: |
        if [ "$(gofmt -s -l ./tests/ | wc -l)" -gt 0 ]; then
          echo "The following files need to be formatted:"
          gofmt -s -l ./tests/
          exit 1
        fi

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
    
    - name: Generate test report
      run: |
        echo "# Portal64API Import Feature Test Report" > test-report.md
        echo "Generated: $(date)" >> test-report.md
        echo "" >> test-report.md
        
        if [ -d "unit-test-results" ]; then
          echo "## Unit Tests" >> test-report.md
          if [ -f "unit-test-results/unit-tests.log" ]; then
            UNIT_STATUS=$(grep -E "(PASS|FAIL)" unit-test-results/unit-tests.log | tail -1)
            echo "Status: $UNIT_STATUS" >> test-report.md
          fi
          echo "" >> test-report.md
        fi
        
        if [ -d "integration-test-results" ]; then
          echo "## Integration Tests" >> test-report.md
          if [ -f "integration-test-results/integration-tests.log" ]; then
            INTEGRATION_STATUS=$(grep -E "(PASS|FAIL)" integration-test-results/integration-tests.log | tail -1)
            echo "Status: $INTEGRATION_STATUS" >> test-report.md
          fi
          echo "" >> test-report.md
        fi
        
        if [ -d "e2e-test-results" ]; then
          echo "## End-to-End Tests" >> test-report.md
          if [ -f "e2e-test-results/e2e-tests.log" ]; then
            E2E_STATUS=$(grep -E "(PASS|FAIL)" e2e-test-results/e2e-tests.log | tail -1)
            echo "Status: $E2E_STATUS" >> test-report.md
          fi
          echo "" >> test-report.md
        fi
        
        if [ -f "unit-test-results/coverage-summary.txt" ]; then
          echo "## Coverage Summary" >> test-report.md
          echo '```' >> test-report.md
          cat unit-test-results/coverage-summary.txt >> test-report.md
          echo '```' >> test-report.md
        fi
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: final-test-report
        path: test-report.md
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-report.md')) {
            const report = fs.readFileSync('test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }
